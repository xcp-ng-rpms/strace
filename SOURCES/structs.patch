Infrastructure to help print structures

From: Frediano Ziglio <frediano.ziglio@citrix.com>

Allow to easier define additional structure information like format
to use for each type.
Extend test to do some base testing of this infrastructure.

Signed-off-by: Frediano Ziglio <frediano.ziglio@citrix.com>

diff --git a/Makefile.am b/Makefile.am
index a6fbd56..cf89294 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -9,7 +9,7 @@ bin_SCRIPTS = strace-graph strace-log-merge
 TESTS = exact_test
 
 noinst_PROGRAMS = exact_test
-exact_test_SOURCES = ioctlexact.c exact_test.c mock_defs.h
+exact_test_SOURCES = ioctlexact.c exact_test.c structs.c mock_defs.h
 exact_test_CPPFLAGS = -DEXACT_TESTING
 
 OS		= linux
@@ -54,6 +54,7 @@ strace_SOURCES =	\
 	sock.c		\
 	strace.c	\
 	stream.c	\
+	structs.c       \
 	syscall.c	\
 	system.c	\
 	term.c		\
@@ -70,7 +71,7 @@ else
 strace_CPPFLAGS = $(AM_CPPFLAGS)
 endif
 
-noinst_HEADERS = defs.h
+noinst_HEADERS = defs.h structs.h
 # Enable this to get link map generated
 #strace_CFLAGS = $(AM_CFLAGS) -Wl,-Map=strace.mapfile
 
diff --git a/exact_test.c b/exact_test.c
index 6b06e70..cfcfde2 100644
--- a/exact_test.c
+++ b/exact_test.c
@@ -30,16 +30,211 @@
  */
 #undef NDEBUG
 #include "mock_defs.h"
+
 #include <assert.h>
+#include <stdarg.h>
+#include <stddef.h>
+
+#include "structs.h"
 
 static struct tcb g_tcb;
+static int g_entering, g_verbose;
+static char *print_buf_begin, *print_buf, *print_buf_end;
+
+static void
+check_buffer(void)
+{
+	assert(print_buf_begin);
+	assert(print_buf_end);
+	assert(print_buf);
+	assert(print_buf >= print_buf_begin);
+	assert(print_buf < print_buf_end);
+}
+
+static void
+reset_buffer(void)
+{
+	check_buffer();
+	print_buf = print_buf_begin;
+	memset(print_buf_begin, 0xff, print_buf_end - print_buf_begin);
+	print_buf_end[-1] = 0;
+}
+
+int mock_entering(struct tcb *tcp)
+{
+	assert(tcp == &g_tcb);
+	return g_entering;
+}
+
+int mock_verbose(struct tcb *tcp)
+{
+	assert(tcp == &g_tcb);
+	return g_verbose;
+}
+
+void mock_tprints(const char *msg)
+{
+	size_t len;
+
+	assert(msg);
+	check_buffer();
+
+	len = strlen(msg);
+	assert(print_buf_end - print_buf > len);
+	strcpy(print_buf, msg);
+	print_buf += len;
+}
+
+void mock_tprintf(const char *fmt, ...)
+{
+	va_list ap;
+	int n;
+
+	assert(fmt);
+	check_buffer();
+
+	va_start(ap, fmt);
+	n = vsnprintf(print_buf, print_buf_end - print_buf, fmt, ap);
+	assert(n >= 0 && (unsigned) n < print_buf_end - print_buf);
+	va_end(ap);
+
+	print_buf += n;
+}
+
+
+typedef struct membuf {
+	long addr;
+	const unsigned char *buf;
+	size_t buf_size;
+} membuf_t;
+#define MEMBUFS_SIZE 32
+static membuf_t membufs[MEMBUFS_SIZE];
+static unsigned membufs_num = 0;
+
+static long mem_addbuf(const void *buf, size_t size)
+{
+	membuf_t *p;
+
+	assert(membufs_num < MEMBUFS_SIZE);
+	p = &membufs[membufs_num++];
+
+	p->addr = 0xff000000 + 0x10000 * membufs_num;
+	p->buf = buf;
+	p->buf_size = size;
+
+	return p->addr;
+}
+
+int mock_umoven(struct tcb *tcp, long addr, int len, char *laddr)
+{
+	membuf_t *p;
+	unsigned n;
+
+	assert(tcp == &g_tcb);
+	for (n = 0; n < MEMBUFS_SIZE; ++n) {
+		p = &membufs[n];
+		if (addr < p->addr || addr >= p->addr + p->buf_size
+		    || len < 0 || len > p->buf_size || addr + len > p->addr + p->buf_size)
+			continue;
+		if (!p->buf)
+			return -1;
+		memcpy(laddr, p->buf + (addr - p->addr), len);
+		return len;
+	}
+	return -1;
+}
+
+struct guid_t {
+	uint32_t n1;
+	uint16_t n2, n3;
+	uint8_t  n4[8];
+};
+
+struct test1_t {
+	int x, y;
+	struct guid_t uuid;
+	int array1[5];
+	int num;
+	int *array2;
+};
+
+DEFINE_BASE_TYPE(int, int, "%d");
+
+#define STRUCT struct test1_t
+FIXED_ARRAY(array1t, array1, int)
+
+PTR_ARRAY(array2t, array2, int, num)
+
+START_STRUCT(test1)
+	BASE_ITEM(int, x)
+	BASE_ITEM(int, y)
+	BASE_ITEM(guid, uuid)
+	BASE_ITEM(array1t, array1)
+	BASE_ITEM(array2t, array2)
+END_STRUCT(test1)
+#undef STRUCT
+
+static void
+check_result(const char *expected)
+{
+	if (strcmp(print_buf_begin, expected) != 0) {
+		fprintf(stderr, "Wrong result\n\tgot:      %s\n\texpected: %s\n", print_buf_begin, expected);
+		exit(1);
+	}
+	reset_buffer();
+	membufs_num = 0;
+}
 
 int main(void)
 {
+	struct test1_t test1;
+	print_status ps;
+	int i;
+	static int array[4] = { 123, 263, -2351, -3465 };
+
 	/* assert a not handled is returned for invalid IOCTL */
 	g_tcb.u_arg[1] = 1;
 	g_tcb.u_arg[2] = 0;
 	assert(ioctl_decode_exact(&g_tcb) == 0);
+
+	/* allocate and initialize print buffer */
+	print_buf_begin = (char*) malloc(4096);
+	assert(print_buf_begin);
+	print_buf = print_buf_begin;
+	print_buf_end = print_buf + 4096;
+	check_buffer();
+
+	/* base type test */
+	status_init(&ps, &g_tcb);
+	ps.entering = 1;
+	i = 12345;
+	type_int.base.print(&ps, &i, &type_int);
+	status_flush(&ps);
+	check_result("12345");
+
+	/* some structure test */
+	test1.x = 12345;
+	test1.y = -87654;
+	test1.uuid.n1 = 0x12345678;
+	test1.uuid.n2 = 0x9abc;
+	test1.uuid.n3 = 0xdef0;
+	for (i = 0; i < 8; ++i)
+		test1.uuid.n4[i] = 0xa2 + 0x37 * i;
+	for (i = 0; i < 8; ++i)
+		test1.array1[i] = 100 - i * 13;
+	test1.num = 4;
+	test1.array2 = (int*) mem_addbuf(array, sizeof(array));
+	type_test1.base.print(&ps, &test1, &type_test1);
+	status_flush(&ps);
+	check_result("{x=12345,y=-87654,uuid=12345678-9abc-def0-a2d910477eb5ec23,array1=[100,87,74,61,48],array2=[123,263,-2351,-3465]}");
+
+	test1.array2 = (int*) 0x1234567;
+	type_test1.base.print(&ps, &test1, &type_test1);
+	status_flush(&ps);
+	check_result("{x=12345,y=-87654,uuid=12345678-9abc-def0-a2d910477eb5ec23,array1=[100,87,74,61,48],array2=BADPTR:0x1234567}");
+
+	free(print_buf_begin);
+
 	return 0;
 }
 
diff --git a/mock_defs.h b/mock_defs.h
index e759790..ffbcdb4 100644
--- a/mock_defs.h
+++ b/mock_defs.h
@@ -8,4 +8,18 @@ struct tcb {
 	long u_arg[3];
 };
 
+int mock_entering(struct tcb *tcp);
+int mock_verbose(struct tcb *tcp);
+
+void mock_tprints(const char *msg);
+void mock_tprintf(const char *fmt, ...) __attribute__ ((format (printf, 1, 2)));
+/* 0 success, <0 error */
+int mock_umoven(struct tcb *tcp, long addr, int len, char *laddr);
+
+#define entering mock_entering
+#define verbose mock_verbose
+#define tprints mock_tprints
+#define tprintf mock_tprintf
+#define umoven mock_umoven
+
 int ioctl_decode_exact(struct tcb *tcp);
diff --git a/structs.c b/structs.c
new file mode 100644
index 0000000..f1e0a1c
--- /dev/null
+++ b/structs.c
@@ -0,0 +1,301 @@
+/*
+ * Copyright (c) 2014 Citrix.
+ * Written by Frediano Ziglio <frediano.ziglio@citrix.com>.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ * 3. The name of the author may not be used to endorse or promote products
+ *    derived from this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
+ * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
+ * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#if EXACT_TESTING
+#  undef NDEBUG
+#  include "mock_defs.h"
+#  include <assert.h>
+#  define dbg(s) s
+#else
+#  include "defs.h"
+#  define dbg(s) do {} while(0)
+#endif
+
+#include <stdarg.h>
+#include <stddef.h>
+
+#include "structs.h"
+
+static void
+assure_space(print_status *status, size_t needed)
+{
+	/* assert(needed <= sizeof(status->buffer)); */
+	if (needed > status->dest_end - status->dest) {
+		tprints(status->buffer);
+		status->buffer[0] = 0;
+		status->dest = status->buffer;
+	}
+}
+
+void
+status_flush(print_status *status)
+{
+	assure_space(status, sizeof(status->buffer));
+}
+
+void
+status_printf(print_status *status, const char *fmt, ...)
+{
+	int l;
+	va_list ap;
+
+	assure_space(status, 64);
+	va_start(ap, fmt);
+	l = vsprintf(status->dest, fmt, ap);
+	va_end(ap);
+	status->dest += l;
+}
+
+static void
+print_void(print_status *status, const void *data, const void *info)
+{
+}
+
+const type_base type_void = {
+	{ print_void, 0 }
+};
+
+void
+print_struct(print_status *status, const void *_data, const void *_info)
+{
+	const unsigned char *data = (const unsigned char *)_data;
+	const type_struct *info = (const type_struct *)_info;
+
+	char sep = '{';
+	const struct_item *item = info->items;
+	// foreach field
+	for (; item->name; ++item, sep = ',') {
+		// print field, value
+		status_printf(status, "%c%s=", sep, item->name);
+		item->info->print(status, (const void*) (data+item->off), item->info);
+	}
+	status_printf(status, "}");
+}
+
+void
+print_fixed_array(print_status *status, const void *_data, const void *_info)
+{
+	const unsigned char *data = (const unsigned char *)_data;
+	const type_fixed_array *info = (const type_fixed_array *)_info;
+
+	const unsigned char *const end = data + info->base.size;
+	const base_type *item = info->item_type;
+	const char *sep = NULL;
+
+	status_printf(status, "[");
+	for (;data < end; data += item->size, sep = ",") {
+		if (sep) status_printf(status, sep);
+		item->print(status, data, item);
+	}
+	status_printf(status, "]");
+}
+
+void
+print_ptr_array(print_status *status, const void *_data, const void *_info)
+{
+	const unsigned char *data_ptr = (const unsigned char *)_data;
+	const type_ptr_array *info = (const type_ptr_array *)_info;
+
+	const base_type *item = info->item_type;
+	int num;
+	char *end, *data, *buf;
+	long arg = *((long*)data_ptr);
+	const char *sep = NULL;
+
+	// TODO find another way to get the number
+	num = *((int*)(data_ptr+info->num_off));
+	if (num < 0) num = 0;
+	if (num > 1024) num = 1024;
+
+	data = buf = (char*) malloc(item->size * num);
+	if (!buf || umoven(status->tcp, arg, item->size * num, buf) < 0) {
+		status_printf(status, "BADPTR:%#lx", arg);
+		free(buf);
+		return;
+	}
+	end  = data + item->size * num;
+	status_printf(status, "[");
+	for (;data < end; data += item->size, sep = ",") {
+		if (sep) status_printf(status, sep);
+		item->print(status, data, item);
+	}
+	status_printf(status, "]");
+	free(buf);
+}
+
+#if 0
+typedef struct {
+	unsigned value;
+	const char *name;
+	const base_type *type;
+	char output;	/* != 0 if output */
+} switch_item;
+
+typedef struct {
+	DATA_START;
+	const switch_item *items;
+	ssize_t data_off;	/* offset to data from number */
+} type_switch;
+
+static void
+print_switch(print_status *status, const void *_data, const void *_info)
+{
+	const unsigned char *data = (const unsigned char *)_data;
+	const type_switch *info = (const type_switch *)_info;
+
+	/* check if we have */
+	unsigned val = *((unsigned *) data);
+	const switch_item *item = info->items;
+	/* TODO sort items */
+	for (; item->name; ++item) {
+		if (item->value != val)
+			continue;
+
+		/* check if proper state */
+//		if (status->entering == item->output)
+//			return;
+
+		/* found !*/
+		status_printf(status, "%s,", item->name);
+		item->type->print(status, data+info->data_off, item->type);
+		return;
+	}
+
+	/* not found */
+	if (status->entering)
+		status_printf(status, "UNKNOWN(%lu)", val);
+}
+#endif
+
+static void
+print_guid(print_status *status, const void *_data, const void *dummy)
+{
+	struct guid {
+		uint32_t n1;
+		uint16_t n2, n3;
+		uint8_t  n4[8];
+	} *data = (struct guid*) _data;
+	status_printf(status, "%08x-%04x-%04x-%02x%02x%02x%02x%02x%02x%02x%02x", data->n1, data->n2, data->n3,
+		data->n4[0], data->n4[1], data->n4[2], data->n4[3], data->n4[4], data->n4[5], data->n4[6], data->n4[7]);
+}
+
+const type_base type_guid = {
+	{ print_guid, 16 }
+};
+
+typedef unsigned long seq_type;
+#define SEQ_FMT "%lu"
+typedef long diff_type;
+#define DIFF_FMT "%ld"
+
+static void
+print_ulong_seq(print_status *status, const seq_type *data, int seq, diff_type offset, const char **sep)
+{
+	if (seq < 3) {
+		data -= seq;
+		for (; seq; --seq, ++data) {
+			status_printf(status, "%s", *sep);
+       			status_printf(status, SEQ_FMT, *data);
+			*sep = ",";
+		}
+		return;
+	}
+
+	status_printf(status, "%s", *sep);
+	*sep = ",";
+	if (offset == 0) {
+		status_printf(status, "%d times " SEQ_FMT, seq, data[-seq]);
+	} else if (offset == 1) {
+		status_printf(status, SEQ_FMT " to " SEQ_FMT, data[-seq], data[-1]);
+	} else {
+		status_printf(status, SEQ_FMT " to " SEQ_FMT " step " DIFF_FMT, data[-seq], data[-1], offset);
+	}
+}
+
+void
+print_ulong_array(print_status *status, const void *_data, const void *_info)
+{
+	const unsigned char *data_ptr = (const unsigned char *)_data;
+	const type_ulong_array *info = (const type_ulong_array *)_info;
+
+	int num, seq;
+	unsigned long *end, *data, *buf;
+	unsigned long offset;
+	long arg = *((long*)data_ptr);
+	const char *sep = "";
+	dbg(int count = 0);
+
+	// TODO find another way to get the number
+	num = *((int*)(data_ptr+info->num_off));
+	if (num < 0) num = 0;
+	if (num > 1024) num = 1024;
+
+	data = buf = (unsigned long*) malloc(sizeof(long) * num);
+	if (!buf || umoven(status->tcp, arg, sizeof(long) * num, (char *) buf) < 0) {
+		status_printf(status, "BADPTR:%#lx", arg);
+		free(buf);
+		return;
+	}
+
+	dbg(printf("-------\n"));
+	end  = data + num;
+	status_printf(status, "[");
+	seq = 0;
+	offset = 0;
+	for (;data < end; ++data) {
+		dbg(assert(data < end));
+		if (seq == 0) {
+			++seq;
+		} else if (seq == 1) {
+			dbg(assert(data - 1 >= buf));
+			offset = data[0] - data[-1];
+			++seq;
+		} else if (data[0] == data[-1] + offset) {
+			++seq;
+		} else {
+			if (seq == 2) { --data, --seq; }
+			dbg(fprintf(stderr, "seq %d offset " DIFF_FMT " data pos %ld data[0] " SEQ_FMT "\n", seq, offset, data - buf, data[0]));
+			/* print elements in the sequence and start again */
+			dbg(count += seq);
+			dbg(assert(data - seq >= buf));
+			dbg(assert(data < end));
+			print_ulong_seq(status, data, seq, offset, &sep);
+			seq = 0;
+			dbg(assert(data > buf));
+			--data;
+		}
+	}
+	dbg(count += seq);
+	dbg(assert(data - seq >= buf));
+	dbg(assert(data == end));
+	print_ulong_seq(status, data, seq, offset, &sep);
+	dbg(fprintf(stderr, "seq %d\n", seq));
+	dbg(assert(num == count));
+	status_printf(status, "]");
+	free(buf);
+}
+
diff --git a/structs.h b/structs.h
new file mode 100644
index 0000000..1d9fe76
--- /dev/null
+++ b/structs.h
@@ -0,0 +1,131 @@
+/*
+ * hold information on status
+ * need flush if space is not enough
+ */
+typedef struct {
+	char *dest, *dest_end;
+	char buffer[256];
+	struct tcb *tcp;
+	char entering;	/* != 0 if entering */
+} print_status;
+
+static inline void
+status_init(print_status *status, struct tcb *tcp)
+{
+	status->dest     = status->buffer;
+	status->dest_end = status->buffer + sizeof(status->buffer);
+	status->tcp      = tcp;
+}
+
+void status_printf(print_status *status, const char *fmt, ...);
+void status_flush(print_status *status);
+
+/* Define structure to handle print of a structure */
+typedef void (*print_func_t)(print_status *status, const void *data, const void *info);
+
+#define DATA_START base_type base
+
+/*
+ * Define base types 
+ */
+typedef struct {
+	print_func_t print;
+	unsigned size;
+} base_type;
+
+typedef struct {
+	DATA_START;
+} type_base;
+
+const type_base type_void;
+const type_base type_guid;
+
+#define DEFINE_BASE_TYPE(name, type, fmt) \
+static void print_ ## name(print_status *status, const void *data, const void *info) { \
+	status_printf(status, fmt, *((type*)(data))); \
+} \
+static const type_base type_ ## name = { { print_ ## name, sizeof(type) } };
+
+/*
+ * Define structures
+ */
+typedef struct {
+	const char *name;	/* name of field NULL if last */
+	const base_type* info;	/* information for printing */
+	size_t off;		/* offset into structure */
+	// size ??
+} struct_item;
+
+typedef struct {
+	DATA_START;
+	const struct_item *items;
+} type_struct;
+
+void print_struct(print_status *status, const void *_data, const void *_info);
+
+#define START_STRUCT(name) \
+static const struct_item name ## _items[] = {
+
+#define BASE_ITEM(type, name) \
+	{ #name, &type_ ## type.base, offsetof(STRUCT, name) },
+
+#define END_STRUCT(name) \
+	{ NULL, } \
+}; \
+	static const type_struct type_ ## name = { \
+		{ print_struct, sizeof(STRUCT) }, \
+		name ## _items \
+	};
+
+
+/*
+ * Fixed arrays
+ * Define structure and macros for arrays with fixed length
+ */
+typedef struct {
+	DATA_START;
+	const base_type *item_type;
+} type_fixed_array;
+
+void print_fixed_array(print_status *status, const void *_data, const void *_info);
+
+#define FIXED_ARRAY(name, field, base_type) \
+	static const type_fixed_array type_ ## name = { \
+		{ print_fixed_array, sizeof(((STRUCT*)0)->field) }, \
+		&type_ ## base_type.base \
+	};
+
+
+/*
+ * Define arrays with size specified
+ */
+typedef struct {
+	DATA_START;
+	unsigned num_size;
+	const base_type *item_type;
+	ssize_t num_off;	/* offset to number from data */
+} type_ptr_array;
+
+void print_ptr_array(print_status *status, const void *_data, const void *_info);
+
+#define PTR_ARRAY(name, field, base_type, count_field) \
+	static const type_ptr_array type_## name = { \
+		{ print_ptr_array, sizeof(void*) }, \
+		sizeof(((STRUCT*)0)->count_field), \
+		&type_ ## base_type.base, \
+		offsetof(STRUCT, count_field) - offsetof(STRUCT, field) \
+	};
+
+
+/*
+ * Define arrays of unsigned longs
+ * This support detecting repetitions and scales inside the sequence
+ */
+typedef struct {
+	DATA_START;
+	unsigned num_size;
+	ssize_t num_off;	/* offset to number from data */
+} type_ulong_array;
+
+void print_ulong_array(print_status *status, const void *_data, const void *_info);
+
